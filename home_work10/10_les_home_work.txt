Завдання 1: Основи HTTP

Поясніть, що таке протокол HTTP і для чого він використовується в веб-розробці. Розкажіть про основні методи HTTP, такі як GET, POST, PUT і DELETE.

Завдання 2: Клієнт та Сервер

2.1. Опишіть різницю між клієнтом і сервером у контексті веб-розробки.

2.2. Поясніть, як клієнт та сервер взаємодіють за допомогою HTTP-запитів та відповідей.

Блок бібліотеки requests:
Основи HTTP
HTTP (HyperText Transfer Protocol) — це протокол передачі даних, який використовується для комунікації між клієнтами (наприклад, веб-браузерами) і серверами в мережі Інтернет. HTTP дозволяє клієнту запитувати ресурси (наприклад, HTML-документи, зображення або JSON-дані), а серверу надсилати відповіді.

Основні методи HTTP:
GET:

Використовується для отримання даних із сервера.
Не змінює стан сервера (idempotent).
Параметри передаються у URL.
POST:

Використовується для надсилання даних на сервер (наприклад, форми реєстрації).
Дані передаються у тілі запиту.
Може змінювати стан сервера.
PUT:

Використовується для оновлення або створення ресурсу на сервері.
Повністю замінює існуючий ресурс.
DELETE:

Використовується для видалення ресурсу із сервера.
2.1 Різниця між клієнтом і сервером:

Клієнт — це пристрій або додаток, який ініціює запит на отримання даних (наприклад, браузер або мобільний додаток).
Сервер — це програмне забезпечення або комп'ютер, який приймає запит від клієнта, обробляє його і надсилає відповідь.
2.2 Взаємодія через HTTP:

Клієнт надсилає HTTP-запит (Request) на сервер. Запит містить:

Метод HTTP (GET, POST і т.д.).
URL ресурсу.
Заголовки.
Опціональні дані (тіло запиту).
Сервер обробляє запит і формує HTTP-відповідь (Response), що містить:

Статус-код (наприклад, 200 OK, 404 Not Found).
Заголовки відповіді.
Тіло відповіді (вміст).


Завдання 1: Виконання GET-запиту

Створіть Python-сценарій, який використовує бібліотеку requests для виконання GET-запиту до веб-ресурсу та виведення вмісту веб-сторінки на екран. Використовуйте функцію requests.get() для виконання запиту.

Завдання 2: Параметри запиту

Розширте попереднє завдання, додаючи можливість вказати параметри запиту. Виконайте GET-запит до веб-ресурсу, передаючи параметри запиту, такі як параметри запиту у URL або параметри через словник.

Завдання 3: POST-запит

Створіть Python-сценарій для виконання POST-запиту до веб-ресурсу. Відправте дані на сервер, наприклад, форму з ім'ям користувача і паролем.

Завдання 4: Обробка відповіді

Після виконання запиту, розпарсьте вміст HTTP-відповіді та виведіть потрібну інформацію. Наприклад, виведіть заголовки відповіді або вміст сторінки.

Завдання 5: Обробка помилок

Додайте обробку помилок до вашого коду. Обробляйте можливі винятки, такі як requests.exceptions.RequestException, та виводьте відповідні повідомлення про помилку.

Завдання 6: Збереження вмісту в файл

Розширте ваш код, щоб зберегти отриманий вміст веб-сторінки у файл. Використайте функціонал Python для роботи з файлами для збереження вмісту.

